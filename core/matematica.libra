// Biblioteca padrão da Libra
// Arquivo: matematica.libra
// Libra é distribuída pela Licença MIT, veja https://github.com/lucasdcampos/libra

// Constantes matemáticas
const PI = 3.141592653589793          // Valor de Pi (π)
const E = 2.718281828459045           // Base do logaritmo natural (e)
const RAZAO_AUREA = 1.6180339887      // Razão Áurea (φ)
const RAIZ2 = 1.41421356237           // Raiz quadrada de 2
const RAIZ3 = 1.73205080757           // Raiz quadrada de 3
const LN2 = 0.69314718056             // Logaritmo natural de 2
const LN10 = 2.30258509299            // Logaritmo natural de 10

const GRAUS_PARA_RAD = PI / 180       // Conversão de graus para radianos
const RAD_PARA_GRAUS = 180 / PI       // Conversão de radianos para graus

const VERDADEIRO = 1                  // Valor lógico para Verdadeiro
const FALSO = 0                       // Valor lógico para FALSO

const SEN_45 = 0.70710678118          // Seno de 45 graus
const COS_45 = 0.70710678118          // Cosseno de 45 graus
const SEN_90 = 1.0                    // Seno de 90 graus
const COS_90 = 0.0                    // Cosseno de 90 graus
const SEN_30 = 0.5                    // Seno de 30 graus
const COS_30 = 0.86602540378          // Cosseno de 30 graus
const SEN_60 = 0.86602540378          // Seno de 60 graus
const COS_60 = 0.5                    // Cosseno de 60 graus

const MAX_INT = 2147483647            // Valor máximo para inteiros de 32 bits
const MIN_INT = -2147483648           // Valor mínimo para inteiros de 32 bits

const BYTE = 8                        // Número de bits em um byte
const KB = 1024                       // Número de bytes em um kilobyte
const MB = 1024 * 1024                // Número de bytes em um megabyte
const GB = 1024 * 1024 * 1024         // Número de bytes em um gigabyte

// Funções matemáticas
funcao pot(base, expoente)
    se expoente == 0 entao
        retornar 1
    fim
    retornar base * pot(base, expoente - 1)
fim

funcao raiz(numero)
    se numero < 0 entao
        erro("Raíz de número negativo")
    fim
    
    // Definindo a estimativa inicial e o nível de precisão desejado
    var = estimativa = numero / 2
    const = precisao = 0.00001

    enquanto abs(estimativa * estimativa - numero) > precisao faca
        estimativa = (estimativa + numero / estimativa) / 2
    fim

    retornar estimativa
fim

funcao exp(valor)
    retornar pot(E, valor)
fim

funcao log(base, valor)
    // Retorna o logaritmo de 'valor' na base 'base'
fim

funcao ln(valor)
    retornar log(E, valor)
fim

funcao sen(angulo)
    // Retorna o seno de 'angulo' (em radianos)
fim

funcao cos(angulo)
    // Retorna o cosseno de 'angulo' (em radianos)
fim

funcao tang(angulo)
    // Retorna a tangente de 'angulo' (em radianos)
fim

funcao fat(n)
    se n == 0 entao
        retornar 1
    senao
        retornar n * fat(n - 1)
    fim
fim

funcao abs(valor)
    se valor < 0 entao
        retornar valor * -1
    fim
    retornar valor
fim

funcao max(a, b)
    se a > b entao
        retornar a
    senao
        retornar b
    fim
fim

funcao min(a, b)
    se a < b entao
        retornar a
    senao
        retornar b
    fim
fim

funcao maior(lista)
    var maior = 0
    var i = 0
    enquanto(i < tamanho(lista))
        se acessar(lista, i) > maior entao
            maior = acessar(lista, i)
        fim
    fim
    retornar maior
fim

funcao menor(lista)
    var menor = 0
    var i = 0
    enquanto(i < tamanho(lista))
        se acessar(lista, i) < menor entao
            menor = acessar(lista, i)
        fim
    fim
    retornar menor
fim

funcao media(lista)
    var soma = 0
    var i = 0

    enquanto i < tamanho(lista)
        soma = soma + acessar(lista, i)
    fim

    retornar soma / tamanho(lista)
fim

funcao mediana(lista)
    var listaOrdenada = ordenar(lista)
    var meio = tamanho(lista) / 2
    se tamanho(lista) % 2 == 0 entao
        retornar (acessar(listaOrdenada, meio) + acessar(listaOrdenada, meio)) / 2
    senao
        retornar acessar(listaOrdenada, meio)
    fim
fim
